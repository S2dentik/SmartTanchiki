#!/usr/local/bin/python3

import curses
import time
import random
import sched, time

COLOR_GREEN = 1

RECT_WIDTH = 3
RECT_HEIGHT = 2
NUM_CARS_IN_ROW = 4
CAR_WIDTH = RECT_WIDTH * 3
CAR_HEIGHT = RECT_HEIGHT * 4
CAR_POSITIONS = [(0, 2), (1, 3), (0, 3), 0, 1, 2, 3]
SPEED = 0.1

class Game():
  def __init__(self):
    self.cars = []
    self.player = Car(CAR_WIDTH, curses.LINES - CAR_HEIGHT - 1)

    curses.start_color()
    curses.init_pair(COLOR_GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)

  def update(self):
    self.drawPlayer()
    self.cars = list(filter(lambda car: car.y < curses.LINES, self.cars))
    if len(self.cars) == 0 or min(self.cars, key=lambda car: car.y).y >= CAR_HEIGHT + 3:
      self.generateRow()
    for car in self.cars:
      car.update()
      car.draw()
    self.checkCollision()
    self.handleKeyPress()

  def generateRow(self):
    position = random.choice(CAR_POSITIONS)
    if isinstance(position, int):
      self.cars.append(Car(position * CAR_WIDTH, -CAR_HEIGHT))
    elif isinstance(position, tuple):
      for value in position:
        self.cars.append(Car(value * CAR_WIDTH, -CAR_HEIGHT))

  def handleKeyPress(self):
    key = screen.getch()
    if not key in [curses.KEY_LEFT, curses.KEY_RIGHT]:
      return
    self.drawPlayer(ch=32)
    if key == curses.KEY_LEFT:
      self.player.x = max(0, self.player.x - CAR_WIDTH)
    elif key == curses.KEY_RIGHT:
      self.player.x = min((NUM_CARS_IN_ROW - 1) * CAR_WIDTH, self.player.x + CAR_WIDTH)
    self.drawPlayer()

  def drawPlayer(self, ch=178):
    self.player.draw(ch, color=COLOR_GREEN)

  def checkCollision(self):
    for car in self.cars:
      if car.y < curses.LINES - 2 * CAR_HEIGHT + 1 or car.y == curses.LINES - 1:
        continue
      elif car.x == self.player.x:
        exit(1)

class Car():
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def update(self):
    self.y += 1

  def draw(self, ch=178, color=None):
    c = chr(ch)
    tuples = [
      (self.x + RECT_WIDTH, self.y), 
      (self.x, self.y + RECT_HEIGHT),
      (self.x + 2 * RECT_WIDTH, self.y + RECT_HEIGHT),
      (self.x + RECT_WIDTH, self.y + RECT_HEIGHT * 2),
      (self.x, self.y + RECT_HEIGHT * 3),
      (self.x + 2 * RECT_WIDTH, self.y + RECT_HEIGHT * 3)
    ]
    for t in tuples:
      self.drawRect(RECT_WIDTH, RECT_HEIGHT, t[0], t[1], c, color)
      
  def drawRect(self, width, height, x, y, chr, color=None):
    line = "".join([chr * width])
    for l in range(y, y + height):
      if l < 0:
        continue
      elif l >= curses.LINES:
        return
      screen.addstr(l, x, line, curses.color_pair(COLOR_GREEN) if color else 0)

def initialize():
  stdscr = curses.initscr()
  curses.noecho()
  curses.cbreak()
  stdscr.keypad(True)
  curses.curs_set(0)
  stdscr.nodelay(True)

  return stdscr

def end(stdscr):
  curses.nocbreak()
  stdscr.keypad(False)
  curses.echo()

screen = initialize()
s = sched.scheduler(time.time, time.sleep)
game = Game()
def update(scheduler):
  screen.clear()
  game.update()
  screen.refresh()
  s.enter(SPEED, 1, update, (scheduler,))
s.enter(SPEED, 1, update, (s,))
s.run()

