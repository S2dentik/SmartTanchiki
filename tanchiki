#!/usr/local/bin/python3

import curses
import numpy as np
from game import *
from statistics import Statistics

import signal
import sys

def initialize():
  stdscr = curses.initscr()
  curses.noecho()
  curses.cbreak()
  stdscr.keypad(True)
  curses.curs_set(0)
  curses.halfdelay(1)

  return stdscr

screen = initialize()

EPISODES = 250000
LEARNING_RATE = 0.4
DISCOUNT = 0.8

q_table = np.full((NUM_CARS_IN_ROW, curses.LINES + 1) * 3 + (3, 3), np.array([0, .5, 0]))
state = (0, 0, 0, 0, 0, 0, 0)

statistics = Statistics()

def signal_handler(sig, frame):
  statistics.save()
  sys.exit(1)
signal.signal(signal.SIGINT, signal_handler)

for episode in range(EPISODES):
  game = Game(screen)
  while not game.done:
    action = np.argmax(q_table[state])
    result = game.update(action, render=episode and episode % 500 == 0)
    if not result:
      continue
    new_state, reward = result
    if not game.done:
      statistics.increment()
      max_future_q = np.max(q_table[new_state])
      current_q = q_table[state + (action, )]
      new_q = (1 - LEARNING_RATE) * current_q + LEARNING_RATE * (reward + DISCOUNT * max_future_q)
      q_table[state + (action, )] = new_q
    else:
      q_table[state + (action, )] = -2
    state = new_state
  statistics.commit()

  screen.addstr(0, 0, f"{episode}")
  screen.refresh()
    
